- debug:
    msg: INSTALLING KIALI

- name: Get information about the cluster
  set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"
  when:
  - is_openshift == False
  - is_k8s == False

- name: Determine the cluster type
  set_fact:
    is_openshift: "{{ True if 'route.openshift.io' in api_groups else False }}"
    is_k8s: "{{ False if 'route.openshift.io' in api_groups else True }}"
  when:
  - is_openshift == False
  - is_k8s == False

# Indicate what kind of cluster we are in (OpenShift or Kubernetes).
- debug:
    msg: "CLUSTER TYPE: is_openshift={{ is_openshift }}; is_k8s={{ is_k8s }}"
- fail:
    msg: "Cannot determine what type of cluster we are in"
  when:
  - is_openshift == False
  - is_k8s == False

- name: Print some debug information
  vars:
    msg: |
        Kiali Variables:
        --------------------------------
        {{ kiali_vars | to_nice_yaml }}
  debug:
    msg: "{{ msg.split('\n') }}"
  tags: test

# We do not want to blindly default to istio-system for some namespaces. If the istio_namespace is not
# provided, assume it is the same namespace where Kiali is being deployed. Set the other istio namespace
# values accordingly.
# We determine the default Istio namespace var first, and the rest will use it for their default as appropriate.

- name: Set default istio namespace
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'istio_namespace': kiali_vars.deployment.namespace}, recursive=True) }}"
  when:
  - kiali_vars.istio_namespace == ""

- name: Set default Grafana namespace
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'external_services': {'grafana': {'namespace': kiali_vars.istio_namespace}}}, recursive=True) }}"
  when:
  - kiali_vars.external_services.grafana.namespace == ""

- name: Set default Tracing service namespace
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'external_services': {'tracing': {'namespace': kiali_vars.istio_namespace}}}, recursive=True) }}"
  when:
  - kiali_vars.external_services.tracing.namespace == ""

- name: Set default Istio service that provides version info
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'external_services': {'istio': {'url_service_version': 'http://istio-pilot.' + kiali_vars.istio_namespace + ':8080/version'}}}, recursive=True) }}"
  when:
  - kiali_vars.external_services.istio.url_service_version == ""

- name: Set default Prometheus URL
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'external_services': {'prometheus': {'url': 'http://prometheus.' + kiali_vars.istio_namespace + ':9090'}}}, recursive=True) }}"
  when:
  - kiali_vars.external_services.prometheus.url == ""

- name: Set default Prometheus Custom Metrics URL
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'external_services': {'prometheus': {'custom_metrics_url': kiali_vars.external_services.prometheus.url}}}, recursive=True) }}"
  when:
  - kiali_vars.external_services.prometheus.custom_metrics_url == ""

# Determine some more defaults.

- name: Set default web root based on cluster type
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'server': {'web_root': '/' if is_openshift else '/kiali'}}, recursive=True) }}"
  when:
  - kiali_vars.server.web_root == ""
- name: Make sure web root never ends with a slash
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'server': {'web_root': kiali_vars.server.web_root | regex_replace('\\/$', '')}}, recursive=True) }}"
  when:
  - kiali_vars.server.web_root != "/"
  - kiali_vars.server.web_root is match(".*/$")

- name: Set default identity cert_file based on cluster type
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'identity': {'cert_file': '/kiali-cert/tls.crt' if is_openshift else '/kiali-cert/cert-chain.pem'}}, recursive=True) }}"
  when:
  - kiali_vars.identity.cert_file == ""
- name: Set default identity private_key_file based on cluster type
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'identity': {'private_key_file': '/kiali-cert/tls.key' if is_openshift else '/kiali-cert/key.pem'}}, recursive=True) }}"
  when:
  - kiali_vars.identity.private_key_file == ""

- name: If image version is latest then we will want to always pull
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'deployment': {'image_pull_policy': 'Always'}}, recursive=True) }}"
  when:
  - kiali_vars.deployment.image_version == "latest"

- name: Set default auth strategy based on cluster type
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'auth': {'strategy': 'openshift' if is_openshift else 'login'}}, recursive=True) }}"
  when:
  - kiali_vars.auth.strategy == ""

# Indicate how users are to authenticate to Kiali, making sure the strategy is valid.
- debug:
    msg: "AUTH STRATEGY={{ kiali_vars.auth.strategy }}"
- name: Confirm auth strategy is valid for OpenShift environments
  fail:
    msg: "Invalid auth.strategy [{{ kiali_vars.auth.strategy }}]! Must be one of either 'login', 'openshift', or 'anonymous'"
  when:
  - is_openshift == True
  - kiali_vars.auth.strategy != 'login'
  - kiali_vars.auth.strategy != 'anonymous'
  - kiali_vars.auth.strategy != 'openshift'
- name: Confirm auth strategy is valid for Kubernetes environments
  fail:
    msg: "Invalid auth.strategy [{{ kiali_vars.auth.strategy }}]! Must be one of either 'login' or 'anonymous'"
  when:
  - is_k8s == True
  - kiali_vars.auth.strategy != 'login'
  - kiali_vars.auth.strategy != 'anonymous'

# WHEN ANSIBLE OPERATOR CONTAINS ANSIBLE 2.8,
# WE CAN REPLACE THIS SHELL TASK BELOW WITH AN ANSIBLE TASK THAT LOOKS LIKE THIS:
#- name: Determine image version when last release is to be installed
#  github_release:
#    user: kiali
#    repo: kiali
#    action: latest_release
#  register: image_version
#  when: kiali_vars.deployment.image_version == "lastrelease"

- name: Determine image version when last release is to be installed
  shell: echo -n $(curl -s https://api.github.com/repos/kiali/kiali/releases/latest 2> /dev/null | grep  "tag_name" | sed -e 's/.*://' -e 's/ *"//' -e 's/",//')
  register: github_lastrelease
  when:
  - kiali_vars.deployment.image_version == "lastrelease"
- set_fact:
    kiali_vars: "{{ kiali_vars | combine({'deployment': {'image_version': github_lastrelease.stdout}}, recursive=True) }}"
  when:
  - kiali_vars.deployment.image_version == "lastrelease"
- fail:
    msg: "Could not determine what the image version should be. Set deployment.image_version to a valid value"
  when:
  - kiali_vars.deployment.image_version == ""

- name: Determine version_label based on image_version
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'deployment': {'version_label': 'master' if kiali_vars.deployment.image_version == 'latest' else kiali_vars.deployment.image_version}}, recursive=True) }}"
  when:
  - kiali_vars.deployment.version_label == ""

# Indicate which Kiali image we are going to use.
- debug:
    msg: "IMAGE_NAME={{ kiali_vars.deployment.image_name }}; IMAGE VERSION={{ kiali_vars.deployment.image_version }}; VERSION LABEL={{ kiali_vars.deployment.version_label }}"

- name: Execute for OpenShift environment
  include: openshift/os-main.yml
  when:
  - is_openshift == True

- name: Execute for Kubernetes environment
  include: kubernetes/k8s-main.yml
  when:
  - is_k8s == True

# The next couple tasks wait for the Monitoring Dashboard CRD to be established, and
# then adds the monitoring dashboard resources. If there are any errors here, they
# are ignored - since the monitoring dashboards are optional, we allow the install to
# continue even though it means the monitoring dashboards feature will be disabled.

- name: Wait for Monitoring Dashboards CRD to be ready
  k8s_facts:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: monitoringdashboards.monitoring.kiali.io
    namespace: "{{ kiali_vars.deployment.namespace }}"
  register: monitoringdashboards_crd
  until:
  - monitoringdashboards_crd | default({}) | json_query('resources[*].status.conditions[?type==`Established`].status') | flatten | join == 'True'
  retries: 6
  delay: 5
  ignore_errors: yes

- name: Warn if Monitoring Dashboards CRD is not available
  debug:
    msg: "It does not appear you have the Monitoring Dashboard CRD created. Monitoring Dashboards will not be created."
  when:
  - monitoringdashboards_crd | default({}) | json_query('resources[*].status.conditions[?type==`Established`].status') | flatten | join != 'True'

- name: Create the Monitoring Dashboards
  k8s:
    state: "present"
    namespace: "{{ kiali_vars.deployment.namespace }}"
    definition: "{{ lookup('template', item) }}"
  with_fileglob:
  - "templates/dashboards/*.yaml"
  ignore_errors: yes
  when:
  - monitoringdashboards_crd | default({}) | json_query('resources[*].status.conditions[?type==`Established`].status') | flatten | join == 'True'

- name: Force the Kiali pod to restart if necessary
  k8s:
    state: "absent"
    api_version: "v1"
    kind: "Pod"
    namespace: "{{ item.metadata.namespace }}"
    name: "{{ item.metadata.name }}"
  vars:
    pods: "{{ query('k8s', kind='Pod', namespace=kiali_vars.deployment.namespace, label_selector='app=kiali') }}"
  loop: "{{ pods }}"
  when:
  - pods is defined
  - processed_resources.configmap is defined
  - processed_resources.configmap.changed == True
  - processed_resources.configmap.method == "patch"

- name: Kiali operator has completed all processing for installation.
  debug:
    msg: "KIALI INSTALLATION IS DONE."
